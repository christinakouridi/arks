"""Common args for ARKS, WRM and ERM training and testing"""
import argparse


class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        super().__init__()

        # training
        self.add_argument("--alg-name", type=str, default='arks',
                          help="algorithm used to train models, possible values: erm, arks, wrm (default: arks)")
        self.add_argument("--seed", type=int, default=0,
                          help="seed for random processes (default: 0)")
        self.add_argument("--num-epochs", type=int, default=45,
                          help="number of training iterations (default: 45)")
        self.add_argument("--batch-size", type=int, default=256,
                          help="number of samples in each batch. Full batch setting corresponds to -1 (default: 128)")

        # data
        self.add_argument("--data", type=str, default='fashion_mnist',
                          help="dataset, possible values: fashion_mnist, cifar_10, celeba (default: fashion_mnist)")
        self.add_argument("--augment", action='store_true',
                          help="whether to augment the data with random cropping and flipping (default: False)")

        # model weight optimization
        self.add_argument("--opt-name", type=str, default='amsgrad',
                          help="optimisation method, possible values: amsgrad, adam, sgd (default: amsgrad)")
        self.add_argument("--lr", type=float, default=0.001,
                          help="learning rate of optimizer of model weights")
        self.add_argument("--decay-lr", action='store_true',
                          help="whether to decay the learning rate of the model weights optimizer (default: False)")
        self.add_argument("--weight-decay", type=float, default=0.0,
                          help="weight decay for stochastic gradient descent optimizer (default: 0)")

        # model
        self.add_argument("--model-class", type=str, default='cnn1',
                          help='model class, possible values: cnn1 (fashion_mnist), cnn2 (celeba), resnet (cifar_10)')
        self.add_argument("--activation", type=str, default='elu',
                          help="activation function, possible values: relu, elu, lrelu (default: elu)")
        self.add_argument("--reduction", action='store_true',
                          help="whether to return the average loss across batch samples (True) or return the loss "
                               "for each sample (False). (default: False)")
        self.add_argument("--model-swa", action='store_true',
                          help="whether to use stochastic weight averaging (default: False)")

        # ARKS & WRM inner optimisation parameters
        self.add_argument("--opt-name-inner", type=str, default='amsgrad',
                          help="inner optimisation method, possible values: amsgrad, adam, sgd (default: amsgrad)")
        self.add_argument("--lr-inner", type=float, default=0.01,
                          help="learning rate for the maximiser of the surrogate objective (default: 0.01)")
        self.add_argument("--num-epoch-inner", type=int, default=15,
                          help="number of inner optimization steps (default: 15)")
        self.add_argument("--decay-lr-inner", action='store_true',
                          help="whether to decay the learning rate in the inner optimisation (default: False)")

        # AKRS-specific parameters
        self.add_argument("--sigma", type=float, default=0.5,
                          help="kernel bandwidth of ARKS (default: 0.5)")

        # WRM-specific parameters
        self.add_argument("--gamma", type=float, default=1.0,
                          help="lagrangian penalty coefficient of WRM (default: 1.0)")

        # attack
        self.add_argument("--evaluate", action='store_true',
                          help="whether to evaluate the trained model on perturbed images generated by attacking the "
                               "model trained with alg-attack; if alg-attack is None, the trained model is attacked "
                               "(default: False)")
        self.add_argument("--record-test-images", action='store_true',
                          help="whether to display sample perturbed images (default: False)")
        self.add_argument("--attack-epoch", type=int, default=15,
                          help="attack epoch for pgd-linf (default: 15)")
        self.add_argument("--alpha", type=float, default=0.03,
                          help="learning rate of method used to generate adversarial perturbations (default:0.02)")
        self.add_argument("--alg-attack", type=str, default=None,
                          help="which trained model to use for generating attack; uses curr trained model by default")
        self.add_argument('--attack-list', default=['fgsm_linf', 'pgd_linf'], nargs='+', type=str,
                          help="evaluation attack type, possible values: fgsm_linf, pgd_linf")

        # config
        self.add_argument("--save-local", action='store_true',
                          help="whether to save logs locally (default: False)")
        self.add_argument("--save-model", action='store_true',
                          help="whether to save the trained model (default: False)")
        self.add_argument("--save-dir", type=str, default='./',
                          help="directory for saving results")
        self.add_argument("--log-interval", type=int, default=1,
                          help="number of epochs between logging results (default: 1)")
        self.add_argument("--wandb", action='store_true',
                          help="log metrics to weights and biases (default: False)")
        self.add_argument("--wandb-project-name", type=str, default='name_me',
                          help="wandb project name, only effective if the wandb flag is enabled (default: name_me)")

    def parse_args(self, args=None):
        """
        Parse the arguments
        """
        args = super().parse_args(args)
        return args
